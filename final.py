import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ContextTypes
import datetime
import random
import sqlite3
from telegram.helpers import escape_markdown
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
BOT_TOKEN = '7606085998:AAFy_zhmnPpx2YXG_2SWO8UaXs3G9zA8be0'
IMAGE_DIRECTORY = "data"
# –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
global answer_q
global ques_q
global wrong_answers
answer_q = ''
answer_q1 = ''
ques_q = ''
wrong_answers = []
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [
    ['/culture', '/geography'],
    ['/with_picture', '/history'],
    ['/help', '/mistakes']
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç –ø–æ –∏–∑—É—á–µ–Ω–∏—é –ª–∏–Ω–≥–≤–æ—Å—Ç—Ä–∞–Ω–æ–≤–µ–¥–µ–Ω–∏—è –ò—Ç–∞–ª–∏–∏! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å:",
        reply_markup=reply_markup,
    )
    user_id = update.effective_user.id
    username = update.effective_user.username

    conn = sqlite3.connect('Game.db')
    cursor = conn.cursor()

    # Check if the user already exists
    cursor.execute("SELECT 1 FROM Users WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

    else:
        # Add the user to the database
        cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    conn.close()


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Ç–µ–º—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.\n"
        "/culture: –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ –ò—Ç–∞–ª–∏–∏\n"
        "/geography: –∑–∞–¥–∞–Ω–∏–µ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ò—Ç–∞–ª–∏–∏\n"
        "/with_picture: –∑–∞–¥–∞–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –ø—Ä–æ –ò—Ç–∞–ª–∏—é\n"
        "/mistakes: –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—à–∏–±–∫–∏\n"
        "/history: –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ò—Ç–∞–ª–∏–∏",
        reply_markup=reply_markup, #–û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


async def with_picture(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Sends an image from the 'data' directory with a caption."""
    try:
        i = random.randint(0, len(Pictures) - 1)
        IMAGE_NAME = Pictures[i][3]
        CAPTION = Pictures[i][0]
        global answer_q
        global ques_q
        global answer_q1
        answer_q1 = Pictures[i][1]
        answer_q = Pictures[i][2]
        ques_q = Pictures[i][0]
        image_path = os.path.join(IMAGE_DIRECTORY, IMAGE_NAME)
        with open(image_path, "rb") as f:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=f, caption=CAPTION)
            logger.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.username}")

    except FileNotFoundError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        logger.error(f"–û—à–∏–±–∫–∞: –ö–∞—Ä—Ç–∏–Ω–∫–∞ '{image_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")


async def culture(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    i = random.randint(0, len(Culture) - 1)
    global answer_q
    global ques_q
    answer_q = Culture[i][1]
    ques_q = Culture[i][0]
    await update.message.reply_text(Culture[i][0], reply_markup=reply_markup)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

async def geography(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç)."""
    i = random.randint(0, len(Geography) - 1)
    global answer_q
    global ques_q
    answer_q = Geography[i][1]
    ques_q = Geography[i][0]
    await update.message.reply_text(Geography[i][0], reply_markup=reply_markup)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ò—Ç–∞–ª–∏–∏."""
    i = random.randint(0, len(History) - 1)
    global answer_q
    global ques_q
    answer_q = History[i][1]
    ques_q = History[i][0]
    await update.message.reply_text(History[i][0], reply_markup=reply_markup)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


async def mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    s = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    k = 0

    for question, correct, user_answer in wrong_answers:
        k += 1
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        safe_question = escape_markdown(str(question), version=2)
        safe_correct = escape_markdown(str(correct), version=2)
        safe_user = escape_markdown(str(user_answer), version=2)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
        error_str = (
            f"{k}\\. {safe_question}\n"
            f"*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç*\: {safe_correct}\n"
            f"~–í–∞—à –æ—Ç–≤–µ—Ç~\: {safe_user}\n\n"
        )

        s += error_str  # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    if s:
        await update.message.reply_text(
            f"üö´ –û—à–∏–±–∫–∏:\n\n{s}",
            parse_mode='MarkdownV2',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("üéâ –ò–º–±–∞, –æ—à–∏–±–æ–∫ –Ω–µ—Ç!")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠—Ö–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥."""
    global answer_q
    global ques_q
    global answer_q1
    if answer_q1 == '':
        ans = answer_q
        if ans.lower() != update.message.text.lower():
            if (ques_q, answer_q, update.message.text) not in wrong_answers:
                wrong_answers.append((ques_q, answer_q, update.message.text))
        safe_ans = escape_markdown(str(answer_q), version=2)
    else:
        ans = answer_q1
        if ans.lower() != update.message.text.lower():
            if (ques_q, answer_q, update.message.text) not in wrong_answers:
                s = f"{ans} –î–æ–ø –∏–Ω—Ñ–∞: {answer_q}"
                wrong_answers.append((ques_q, s, update.message.text))
        safe_ans = escape_markdown(str(answer_q1), version=2)
        answer_q1 = ''
    message = f"_–ú–æ–ª–æ–¥–µ—Ü\!_\n*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç*\: {safe_ans}"

    await update.message.reply_text(
        message,
        parse_mode='MarkdownV2',
        reply_markup=reply_markup
    )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("mistakes", mistakes))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("culture", culture))
    application.add_handler(CommandHandler("geography", geography))
    application.add_handler(CommandHandler("with_picture", with_picture))
    application.add_handler(CommandHandler("history", history))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (—ç—Ö–æ)
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, echo)
    application.add_handler(text_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


# –ó–∞–ø—É—Å–∫ main()
if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect('Game.db')
    cursor = connection.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    # –ü–ï–†–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê (–∫—É–ª—å—Ç—É—Ä–∞)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS Culture (
            question TEXT,
            answer TEXT
            )
            ''')

    cursor.execute('''
        INSERT INTO Culture (question, answer) VALUES
        ('Il motto di Caio Giuglio Cesare', 'Aut Caesar, aut nullus'),
        ('Che cosa Caio Giuglio Cesare portava sempre', 'la corona d‚Äôalloro'),
        ('Il libro pi√π famoso di Caio Giuglio Cesare che parla della sua impresa pi√π importante si chiama...', 'De bello gallico'),
        ('Il famoso detto che nasce quando Cesare torna dalla Gallia', 'passare il Rubicone'),
        ('Il motto di Caio Giuglio Cesare relativo a Bruto', 'ANCHE TU, BRUTO, FIGLIO MIO'),
        ('l‚Äôabbigliamento tipico dell‚Äôepoca fatto di lino e lana √®...', 'tunica'),
        ('la giacca e cravatta dell‚Äôepoca romana, poteva essere indossata solo dai cittadini romani √®...', 'toga'),
        ('(I romani) signori del mondo, popolo...', 'togato'),
        ('Qual √® il nome di un luogo in un monastero dove si preparano le cure a base di erbe?', 'L‚Äôerboristeria'),
        ('Qual √® il nome di un luogo in un monastero dove i monaci si lavano?', 'Il lavatorium'),
        ('Qual √® il nome di un luogo in un monastero dove i monaci mangiano in silenzio?', 'Il refettorio'),
        ('Qual √® il nome di un luogo in un monastero dove i monaci possono camminare e pregare?', 'Il chiostro'),
        ('La campana della cattedrale serviva per indicare le ore, e per comunicare le cose pi√π importanti (la guerra, la pace, la festa, ecc.). √à vero?', 'S√¨'),
        ('Di che cosa vetrate, mosaici, affreschi sono gli elementi principali?', 'Cattedrale medievale')
        
        
        
        
        ''')

    # –í–¢–û–†–ê–Ø –¢–ê–ë–õ–ò–¶–ê (History)
    cursor.execute('''
            CREATE TABLE IF NOT EXISTS History (
                question TEXT,
                answer TEXT
                )
                ''')

    cursor.execute('''
            INSERT INTO History (question, answer) VALUES ('Quando con la deposizione dell‚Äôultimo imperatore Romolo Augustolo cadde l‚ÄôImpero Romano dell‚ÄôOccidente?', '476 d.C'),
            ('Quale periodo di tempo √® chiamato Alto Medioevo (ossia Primo Medioevo)?', '476 d.C - 1000'),
            ('Quale periodo di tempo √® chiamato Basso Medioevo (ossia Secondo Medioevo)?', '1000 - 1492'),
            ('L‚Äôuniversita di Bologna fu fondata nel...', '1088'),
            ('Quando i vandali saccheggiano Roma?', '410 d.C'),
            ('La chiesa e signori feudali sono due elementi fondamentali del mondo...', 'Medievale'),
            ('Fondazione di Roma?', '753 a.C'),
            ('Conquista della Gallia?', '52 a.C'),
            ('Incendio di Roma?', '64 d.C'),
            ('Anni della costruzione del Colosseo?', '72 d.C - 80 d.C'),
            ('Eruzione del Vesuvio?', '79 d.C'),
            ('Massima espansione dell‚Äôimpero?', '117 d.C'),
            ('Sotto quale imperatore, nel 117, Roma raggiunge la sua massima espansione?', 'Traiano'),
            ('Caracalla, Diocleziano... nome della dinastia?', 'Dinastia dei Severi'),
            ('Costantino I il Grande, Teodosio I il Grande... nome della dinastia?', 'Dinastia dei Flavi'),
            ('Sotto quale imperatore si sono verificati questi eventi: (inaugurazione del Colosseo, eruzione del Vesuvio il 79 d.C', 'Tito'),
            ('Caduta dell‚Äôimpero romano d‚ÄôOccidente?', '476 d.C'),
            ('Anni della vita di Caio Giuglio Cesare?', '100 a.C - 44 a.C'),
            ('Le quattro lettere che in latino definivano il Senato e il Popolo Romano', 'SPQR'),
            ('Dopo le quattro vittorie sui galli, sull‚ÄôEgitto, in Asia e in Spagna, Caio Giulio Cesare riceve il titolo', 'dittatore a vita'),
            ('Il primo imperatore?', 'Ottaviano Augusto'),
            ('Quanti anni regn√≤ Ottaviano Augusto', '45'),
            ('Ottaviano Augusto fu "princeps pari"?', 'S√¨'),
            ('Tiberio, Caligola, Nerone... nome della dinastia?', 'Giulio-Claudio'),
            ('Vespasiano, Tito... nome della dinastia?', 'Dinastia dei Flavi (1)'),
            ('Traiano, Adriano... nome della dinastia?', 'Dinastia degli Antonini'),
            ('Sotto quale imperatore, nel 117, Roma raggiunge la sua massima espansione?', 'Traiano'),
            ('Caracalla, Diocleziano... nome della dinastia?', 'Dinastia dei Severi'),
            ('Costantino I il Grande, Teodosio I il Grande... nome della dinastia?', 'Dinastia dei Flavi (2)'),
            ('Sotto quale imperatore si sono verificati questi eventi: (inaugurazione del Colosseo, eruzione del Vesuvio il 79 d.C', 'Tito'),
            ('Chi √® noto per la sua crudelt√† e ordin√≤ l‚Äôarresto e la condanna a morte di Pilato?', 'Tiberio'),
            ('Chi fece nominare senatore il proprio cavallo?', 'Caligola'),
            ('La chiesa e signori feudali sono due elementi fondamentali del mondo...', 'Medievale'),
            ('L‚ÄôUniversit√† pi√π antica d‚ÄôEuropa √®', 'L‚ÄôUniversit√† di Bologna')
            ''')

    # –¢–†–ï–¢–¨–Ø –¢–ê–ë–õ–ò–¶–ê (Geography)
    cursor.execute('''
                CREATE TABLE IF NOT EXISTS Geography (
                    question TEXT,
                    answer TEXT
                    )
                    ''')

    cursor.execute('''
                INSERT INTO Geography (question, answer) VALUES ('Quando con la deposizione dell‚Äôultimo imperatore Romolo Augustolo cadde l‚ÄôImpero Romano dell‚ÄôOccidente?', '476 d.C'),
                ('Quale periodo di tempo √® chiamato Alto Medioevo (ossia Primo Medioevo)?', '476 d.C - 1000'),
                ('Quale periodo di tempo √® chiamato Basso Medioevo (ossia Secondo Medioevo)?', '1000 - 1492'),
                ('L‚Äôuniversita di Bologna fu fondata nel...', '1088'),
                ('Quando i vandali saccheggiano Roma?', '410 d.C'),
                ('La chiesa e signori feudali sono due elementi fondamentali del mondo...', 'Medievale'),
                ('Il primo imperatore?', 'OTTAVIANO AUGUSTO'),
                ('Quanti anni regn√≤ Ottaviano Augusto', '45'),
                ('Ottaviano Augusto fu "princeps pari"?', 'si'),
                ('Tiberio, Caligola, Nerone... nome della dinastia?', 'Giulio-Claudio'),
                ('Vespasiano, Tito... nome della dinastia?', 'Dinastia dei Flavi'),
                ('Traiano, Adriano... nome della dinastia?', 'Dinastia degli Antonini'),
                ('Sotto quale imperatore, nel 117, Roma raggiunge la sua massima espansione?', 'Traiano'),
                ('Caracalla, Diocleziano... nome della dinastia?', 'Dinastia dei Severi'),
                ('Costantino I il Grande, Teodosio I il Grande... nome della dinastia?', 'Dinastia dei Flavi'),
                ('Sotto quale imperatore si sono verificati questi eventi: (inaugurazione del Colosseo, eruzione del Vesuvio il 79 d.C', 'Tito'),
                
                
                ('Il famoso detto che nasce quando Cesare torna dalla Gallia', 'passare il Rubicone')
                ''')

    # –ß–ï–¢–í–Å–†–¢–ê–Ø –¢–ê–ë–õ–ò–¶–ê (Mistakes)
    cursor.execute('''
                    CREATE TABLE IF NOT EXISTS Mistakes (
                        question TEXT,
                        answer_correct TEXT,
                        answer_user TEXT
                        )
                        ''')

    # –ü–Ø–¢–ê–Ø –¢–ê–ë–õ–ò–¶–ê (With_pictures)
    cursor.execute('''
                    CREATE TABLE IF NOT EXISTS Pictures (    
                        question TEXT,
                        answer_for_compare TEXT,
                        answer TEXT,
                        pict TEXT
                        )
                        ''')

    cursor.execute('''
                    INSERT INTO Pictures (question, answer_for_compare, answer, pict) VALUES
                    ('Qual √® il nome dell‚Äôautore del dipinto?', 'LEONARDO DA VINCI', 'Autore √® LEONARDO DA VINCI, nome √®  Il Cenacolo (l‚ÄôUltima Cena), si trova a Chiesa di Santa Maria delle Grazie, Milano', 'Cenacolo.jpg'),
                    ('Come si chiama?', 'Galileo Galilei', 'Galileo Galilei', 'Galileo_Galilei.jpg'),
                    ('Qual √® il nome dell‚Äôautore del dipinto?', 'LEONARDO DA VINCI', 'Autore √® LEONARDO DA VINCI, nome √® Gioconda (Monalisa), si trova a Museo del Louvre di Parigi', 'Gioconda.jpg'),
                    ('Qual √® il nome dell‚Äôautore del dipinto?', 'RAFFAELLO SANZIO', 'Autore √® RAFFAELLO SANZIO, nome √® La Velata, si trova a Firenze, Palazzo Pitti', 'La_velata_Rafael.jpg'),
                    ('Come si chiama?', 'LEONARDO DA VINCI', 'LEONARDO DA VINCI', 'Leonardo_da_Vinci.jpg'),
                    ('Qual √® il nome dell‚Äôautore del dipinto?', 'RAFFAELLO SANZIO', 'Autore √® RAFFAELLO SANZIO, nome √®  Madonna di casa Santi, si trova a Urbino', 'Madonna_di_Casa_Santi.jpg'),
                    ('Qual √® il nome dell‚Äôautore del dipinto?', 'RAFFAELLO SANZIO', 'Autore √® RAFFAELLO SANZIO, nome √® Madonna Sistina, si trova Dresda', 'Madonna_Sistina.jpg'),
                    ('Di chi √® questa invenzione?', 'LEONARDO DA VINCI', 'Inventore √® LEONARDO DA VINCI, nome √® "modello di elicottero"', 'modello_di_elicottero.jpg'),
                    ('Di chi √® questa invenzione?', 'LEONARDO DA VINCI', 'Inventore √® LEONARDO DA VINCI, nome √® "ornitottero"', 'ornitottero.jpg'),
                    ('Come si chiama questo posto?', 'Palmanova', 'Palmanova', 'Palmanova.jpg'),
                    ('Come si chiama?', 'Raffaello Sanzio', 'Raffaello Sanzio', 'Raffaello_Sanzio.jpg'),
                    ('Come si chiama questo posto?', 'Terra del Sole', 'Terra del Sole', 'Terra_del_Sole.jpg')
                    ''')

    cursor.execute('''
                    CREATE TABLE IF NOT EXISTS Users (
                        user_id INTEGER,
                        username TEXT
                        )
                        ''')

    # —Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Culture
    cursor.execute("SELECT * FROM Culture")
    Culture = cursor.fetchall()
    print(Culture)
    # —Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã History
    cursor.execute("SELECT * FROM History")
    History = cursor.fetchall()
    # —Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Geography
    cursor.execute("SELECT * FROM Geography")
    Geography = cursor.fetchall()
    # —Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Pictures
    cursor.execute("SELECT * FROM Pictures")
    Pictures = cursor.fetchall()

    cursor.execute("SELECT * FROM Users")
    User = cursor.fetchall()
    print(User)

    connection.commit()
    connection.close()
    main()